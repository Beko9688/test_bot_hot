from random import randint

from aiogram.dispatcher import FSMContext

from loader import dp, bot
from aiogram import types
from keyboards.inline import menu_callback, restart, get_gift, finish_buttons, throw_dice
from states import Game
from data.answers import answers

number_of_ex_photo = 13


@dp.callback_query_handler(menu_callback.filter(item_name='start_game'))
async def start_game(call: types.CallbackQuery, state: FSMContext):
    number = randint(1, number_of_ex_photo)
    random_photo = open(f'mathematical examples/{number}.png', 'rb')
    await call.message.answer_photo(photo=random_photo, caption='–ü—Ä–∏–º–µ—Ä ‚Ññ1 [–æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–∏—Å–ª–æ]')
    random_photo.close()
    await Game.First.set()
    await state.update_data(number_of_ex=number)


@dp.message_handler(state=Game.First)
async def first_answer(message: types.Message, state: FSMContext):
    data = await state.get_data()

    number_of_ex = data.get('number_of_ex')
    try:
        if int(message.text) == answers.get(number_of_ex):
            await message.answer(text='–ü—Ä–∞–≤–∏–ª—å–Ω–æ ‚úÖ')
            number = randint(1, number_of_ex_photo)
            random_photo = open(f'mathematical examples/{number}.png', 'rb')
            await message.answer_photo(photo=random_photo, caption='–ü—Ä–∏–º–µ—Ä ‚Ññ2 [–æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–∏—Å–ª–æ]')
            random_photo.close()
            await Game.Second.set()
            await state.update_data(number_of_ex=number)
        else:
            await state.finish()
            await message.answer(text=' ‚ùå –ù–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ, –ø—Ä–∏–¥–µ—Ç—Å—è –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≥–æ', reply_markup=restart)
    except ValueError as val_err:
        await message.answer(text='–ë–ª—è –Ω–∞–ø–∏—Å–∞–Ω–æ –∂–µ —á–∏—Å–ª–æ —Å—É–∫–∞, –æ—Ç–ø—Ä–∞–≤—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ')


@dp.message_handler(state=Game.Second)
async def first_answer(message: types.Message, state: FSMContext):
    data = await state.get_data()

    number_of_ex = data.get('number_of_ex')
    try:
        if int(message.text) == answers.get(number_of_ex):
            await message.answer(text='–ü—Ä–∞–≤–∏–ª—å–Ω–æ ‚úÖ')
            number = randint(1, number_of_ex_photo)
            random_photo = open(f'mathematical examples/{number}.png', 'rb')
            await message.answer_photo(photo=random_photo, caption='–ü—Ä–∏–º–µ—Ä ‚Ññ3 [–æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–∏—Å–ª–æ]')
            random_photo.close()
            await Game.Third.set()
            await state.update_data(number_of_ex=number)
        else:
            await state.finish()
            await message.answer(text='‚ùå –ù–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ, –ø—Ä–∏–¥–µ—Ç—Å—è –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≥–æ', reply_markup=restart)
    except ValueError as val_err:
        await message.answer(text='–ë–ª—è –Ω–∞–ø–∏—Å–∞–Ω–æ –∂–µ —á–∏—Å–ª–æ —Å—É–∫–∞, –æ—Ç–ø—Ä–∞–≤—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ')


@dp.message_handler(state=Game.Third)
async def first_answer(message: types.Message, state: FSMContext):
    data = await state.get_data()

    number_of_ex = data.get('number_of_ex')
    try:
        if int(message.text) == answers.get(number_of_ex):
            await message.answer(text='–ü—Ä–∞–≤–∏–ª—å–Ω–æ ‚úÖ\n–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –≤—ã —Ä–µ—à–∏–ª–∏ 3 –ø—Ä–∏–º–µ—Ä–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ!', reply_markup=get_gift)
            await state.finish()
        else:
            await state.finish()
            await message.answer(text='‚ùå –ù–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ, –ø—Ä–∏–¥–µ—Ç—Å—è –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≥–æ', reply_markup=restart)
    except ValueError as val_err:
        await message.answer(text='–ë–ª—è –Ω–∞–ø–∏—Å–∞–Ω–æ –∂–µ —á–∏—Å–ª–æ —Å—É–∫–∞, –æ—Ç–ø—Ä–∞–≤—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ')


@dp.callback_query_handler(menu_callback.filter(item_name='get_gift'))
async def get_my_gift(call: types.CallbackQuery):
    number = randint(1, 14)
    random_photo = open(f'gift photo/{number}.png', 'rb')
    await call.message.answer_photo(photo=random_photo, caption='–î–µ—Ä–∂–∏ —Ç—ë–ª–∫—É, —Ç—ã –∑–∞—Å–ª—É–∂–∏–ª ü§ô',
                                    reply_markup=finish_buttons)
    await call.message.delete()


@dp.callback_query_handler(menu_callback.filter(item_name='no_show'))
async def get_my_gift(call: types.CallbackQuery):
    await call.answer(text='–õ–∞–¥–Ω–æ –µ—Å–ª–∏ –Ω–µ —Ö–æ—á–µ—à—å —Ç—ë–ª–æ–∫ —Ç–æ –º—ã –∑–∞–Ω–µ—Å–ª–∏ —Ç–µ–±—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–∏–¥–æ—Ä–æ–≤', show_alert=True)
    await call.message.delete()


@dp.callback_query_handler(menu_callback.filter(item_name='special'))
async def get_my_gift(call: types.CallbackQuery):
    await call.message.answer(text=f'–ï—Å–ª–∏ –≤—ã–ø–∞–¥–µ—Ç —á–∏—Å–ª–æ :<code>{randint(1, 6)}</code>\n–¢–æ —Ç—ã –ø–æ–ª—É—á–∏—à—å –æ—Å–æ–±—ã–π –ø—Ä–∏–∑.',
                              reply_markup=throw_dice)


@dp.callback_query_handler(menu_callback.filter(item_name='throw_dice'))
async def get_my_gift(call: types.CallbackQuery):
    if call.message.dice.value == 5:
        print('-=5=-')
    else:
        print('not -=5=-')
